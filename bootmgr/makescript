/* Target constants */
var output = "../mount/saki/bootmgr/bootmgr.bin"
var elfOutput = "../bin/bootmgr/bootmgr.ske";
var objOutput = [];
var depLibrary = [
  "data-struct",
  "lib-format",
  "generic-io",
  "text-video",
  "c-stdlib",
  "mem-alloc",
  "clib-independent"
].map(function(name) {
  return "../bin/libs/" + name + ".a";
});

recursiveList(".").forEach(function(file) {
  var ext = file.extension();
  if (ext == ".c") {
    objOutput.push("../bin/bootmgr/" + file.extension(".o"));
  }
});

objOutput.unshift("../bin/bootmgr/loader.o");

var cCompiler = "gcc";
var cFlags = (
  "-I ../include/ -I ./ " +
  "-m32 -Os -c -g -fno-builtin -fno-stack-protector " +
  "-fno-signed-char -funsigned-char -Wimplicit -ffreestanding -mno-red-zone -mno-mmx -mno-sse -mno-sse2 " +
  "-mno-sse3 -mno-3dnow -Wall --std=gnu99"
).split(" ");

/* Helper functions */
function objcopy(format, target, dep) {
  exec("objcopy", [
    "-O", format
  ].concat(dep, target));
}

function ld(target, dep) {
  exec("ld", [
    "-o", target,
    "-melf_i386",
    "-T", "ldscript",
    "-e", "_start",
    "--gc-sections"
  ].concat(dep));
}

function nasm(target, dep) {
  exec("nasm", ["-felf32"].concat(dep, "-o", target));
}

function cc(target, dep) {
  exec(cCompiler, cFlags.concat(dep, "-o", target));
}

/* Targets */
setDefault("everything");

phony("everything", output);

phony("clean", function() {
  rm([output, elfOutput].concat(objOutput), ["r", "f"]);
});

phony("all", ["clean", "everything"]);

target(output, [elfOutput, $(objcopy, "binary")]);

target(elfOutput, objOutput.concat(depLibrary, ld));

targetRegex(/^.*\.o$/, $depExist, function(target) {
  return target.replace("../bin/bootmgr/", "").extension(".asm");
}, nasm);

targetRegex(/^.*\.o$/, $depExist, function(target) {
  return target.replace("../bin/bootmgr/", "").extension(".c");
}, cc);

mkdirIfNotExist("../bin");
mkdirIfNotExist("../bin/bootmgr");
mkdirIfNotExist("../bin/bootmgr/vfs");